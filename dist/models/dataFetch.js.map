{"version":3,"sources":["../../models/dataFetch.js"],"names":["Promise","require","Models","getNumberRemplissages","next","Remplissage","count","then","getNumberRemplissagesJour","jour","where","date","getCommentairesJour","Commentaire","findAll","include","model","Thematique","commentaires","promiseList","forEach","commentaire","promise","resolve","dataValues","user","firstName","lastName","email","User","findOne","id","remplissage","user_id","push","all","console","log","getNumberReponses","Reponse","getNumberReponsesJour","getAllStatistics","dataFetch","module","exports"],"mappings":"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","sourcesContent":["const Promise = require(\"bluebird\");\n\nconst Models = require('../models/index');\n\nconst getNumberRemplissages = function (next) {\n  Models.Remplissage.count().then((count) => { \n    next(count); \n  });\n};\n\nconst getNumberRemplissagesJour = function (jour, next) {\n  Models.Remplissage.count({ where: { date: jour } }).then((count) => { \n    next(count); \n  });\n};\n\nconst getCommentairesJour = function (jour, next) {\n  Models.Commentaire.findAll({\n    include: [{\n      model: Models.Remplissage,\n      where: { date: jour },\n    },\n    {\n      model: Models.Thematique,\n    },\n    ],\n  }).then((commentaires) => {\n    const promiseList = [];\n    commentaires.forEach((commentaire) => {\n      const promise = new Promise((resolve) => {\n        commentaire.dataValues.user = {\n          firstName: \"\",\n          lastName: \"\",\n          email: \"\",\n        };\n        Models.User.findOne({ where: { id: commentaire.dataValues.remplissage.dataValues.user_id } })\n          .then((user) => {\n            commentaire.dataValues.user.firstName = user.dataValues.firstName;\n            commentaire.dataValues.user.lastName = user.dataValues.lastName;\n            commentaire.dataValues.user.email = user.dataValues.email;\n            resolve();\n          });\n      });\n      promiseList.push(promise);\n    });\n    Promise.all(promiseList).then(() => {\n      console.log(\"FINISHED!!!!!\");\n      next(commentaires);\n    });\n  });\n};\n\nconst getNumberReponses = function (next) {\n  Models.Reponse.count().then((count) => { \n    next(count); \n  });\n};\n\nconst getNumberReponsesJour = function (jour, next) {\n  Models.Reponse.count({ \n    include: [{\n      model: Models.Remplissage,\n      where: { date: jour },\n    }],\n  }).then((count) => { \n    next(count); \n  });\n};\n\nconst getAllStatistics = function () {\n  \n};\n\nconst dataFetch = {\n  getNumberRemplissages: getNumberRemplissages,\n  getNumberRemplissagesJour: getNumberRemplissagesJour,\n  getNumberReponses: getNumberReponses,\n  getNumberReponsesJour: getNumberReponsesJour,\n  getCommentairesJour: getCommentairesJour,\n};\n\nmodule.exports = dataFetch;"],"file":"dataFetch.js"}