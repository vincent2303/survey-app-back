{"version":3,"sources":["../../models/index.js"],"names":["Sequelize","require","env","id_generator","Op","userConstructor","jourSondageConstructor","questionConstructor","remplissageConstructor","reponseConstructor","sondageConstructor","thematiqueConstructor","commentaireConstructor","sequelize","database","username","password","host","dialect","operatorsAliases","logging","pool","max","min","acquire","idle","User","JourSondage","Question","Remplissage","Reponse","Sondage","Thematique","Commentaire","belongsTo","foreignKey","targetKey","prototype","getSondage","Promise","resolve","sondageList","findAll","then","sondages","include","model","questions","forEach","sondage","thematiqueList","question","dataValues","sondage_id","id","thema","filter","thematique","thematique_id","length","questionList","push","valeur","name","current","addThematiqueId","thematiqueListWithId","thematiqueWithId","createSondage","addSondage","pseudo","Date","now","promises","addThematique","all","addQuestion","text","keyWord","getCommentairesJour","jour","where","date","commentaires","promiseList","commentaire","promise","resolveCom","user","firstName","lastName","email","findOne","remplissage","user_id","console","log","getStatisticsSpecific","searchDate","parseInt","year","month","day","resolveAll","date_emmission","jourSondage","thematiqueIdList","remplissageIdList","sondage_name","questionListFound","includes","remplissageListFound","reponseList","or","thematiqueListFound","remplissage_id","reponses","reponse","sondageMap","Map","thematiqueMap","set","thematiqueName","questionMap","questionToThematique","get","sum","numberAnswer","thematiqueId","question_id","sondageResult","thematiqueObject","questionObject","avg","getStatistics","next","statistics","monthSentSondage","monthAnsweredSondage","totalSentSondage","totalAnsweredSondage","totalRate","totalSatis","todayAnsweredSendedRate","todayAverageSatisfaction","monthAverageSatisfaction","weekRate","getTotalAnsweredSondage","count","total","getTotalSentSondage","getTotalRate","data","rate","parseFloat","toFixed","getTotalSatis","val","getJourSentSondage","jourDate","toLocaleDateString","jsondage","nombre_emission","getJourAnsweredSondage","nb","getMonthSentSondage","intPromises","i","getMonthAnsweredSondage","getDayStatis","reps","satisfaction","rep","getDayRate","Number","getTodayStatis","getTodayRate","getMonthStatis","getWeekRate","statisticTab","findSondage","req","serverResponse","alreadyAnswered","quest","JSON","parse","stringify","newList","elem","sondageName","commentaireList","answerSondage","simulationDate","addRemplissage","answered_questions","question_answer","addReponse","answer","answered_commentaires","commentaire_answer","addCommentaire","updateSondage","updateReponse","comment","updateCommentaire","Models","module","exports"],"mappings":"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","sourcesContent":["const Sequelize = require('sequelize');\nconst env = require('../const');\nconst id_generator = require('../custom_module/id_generator');\n// const getCommentaire = require('./dataFetch').getCommentaire;\n\nconst Op = Sequelize.Op;\n\n// models constructors\nconst userConstructor = require('./constructor/user');\nconst jourSondageConstructor = require('./constructor/jourSondage');\nconst questionConstructor = require('./constructor/question');\nconst remplissageConstructor = require('./constructor/remplissage');\nconst reponseConstructor = require('./constructor/reponse');\nconst sondageConstructor = require('./constructor/sondage');\nconst thematiqueConstructor = require('./constructor/thematique');\nconst commentaireConstructor = require('./constructor/commentaire');\n\n// sequelize connection\nconst sequelize = new Sequelize(env.database, env.username, env.password, {\n  host: env.host,\n  dialect: 'mysql',\n  operatorsAliases: false,\n  logging: false,\n  pool: {\n    max: 5,\n    min: 0,\n    acquire: 30000,\n    idle: 10000,\n  },\n});\n\n// Models\nconst User = userConstructor(sequelize);\nconst JourSondage = jourSondageConstructor(sequelize);\nconst Question = questionConstructor(sequelize);\nconst Remplissage = remplissageConstructor(sequelize);\nconst Reponse = reponseConstructor(sequelize);\nconst Sondage = sondageConstructor(sequelize);\nconst Thematique = thematiqueConstructor(sequelize);\nconst Commentaire = commentaireConstructor(sequelize);\n\n// // Foreign keys\nQuestion.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nJourSondage.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nReponse.belongsTo(Question, { foreignKey: 'question_id', targetKey: 'id' });\nReponse.belongsTo(Remplissage, { foreignKey: 'remplissage_id', targetKey: 'id' });\nRemplissage.belongsTo(Sondage, { foreignKey: 'sondage_id', targetKey: 'id' });\nRemplissage.belongsTo(User, { foreignKey: 'user_id', targetKey: 'id' });\nQuestion.belongsTo(Thematique, { foreignKey: 'thematique_id', targetKey: 'id' });\nCommentaire.belongsTo(Thematique, { foreignKey: 'thematique_id', targetKey: 'id' });\nCommentaire.belongsTo(Remplissage, { foreignKey: 'remplissage_id', targetKey: 'id' });\n\n// Should change this function by using promises more\nUser.prototype.getSondage = function () {\n  return new Promise((resolve) => {\n    const sondageList = [];\n    Sondage.findAll().then((sondages) => {\n      Question.findAll({\n        include: [{\n          model: Thematique,\n        }],\n      }).then((questions) => {\n        sondages.forEach((sondage) => {\n          const thematiqueList = [];\n          questions.forEach((question) => {\n            if (question.dataValues.sondage_id === sondage.dataValues.id) {\n              const thema = thematiqueList.filter(\n                thematique => thematique.id === question.dataValues.thematique_id,\n              );\n              if (thema.length > 0) {\n                thema[0].questionList.push({\n                  id: question.dataValues.id, \n                  question: question.dataValues.valeur,\n                });\n              } else {\n                thematiqueList.push({\n                  id: question.dataValues.thematique_id,\n                  name: question.dataValues.thematique.dataValues.name,\n                  questionList: [{\n                    id: question.dataValues.id, \n                    question: question.dataValues.valeur,\n                  }],\n                });\n              }\n            }\n          });\n          sondageList.push({\n            id: sondage.dataValues.id, \n            name: sondage.dataValues.name,\n            thematiqueList: thematiqueList,\n            current: sondage.dataValues.current,\n          });\n        });\n        resolve(sondageList);\n      });\n    });\n  });\n};\n\nconst addThematiqueId = function (thematiqueList, thematiqueListWithId) {\n  thematiqueList.forEach((thematique) => {\n    thematiqueListWithId.forEach((thematiqueWithId) => {\n      if (thematiqueWithId.name === thematique.name) {\n        thematique.id = thematiqueWithId.id;\n      }\n    });\n  });\n  return thematiqueList;\n};\n\nUser.prototype.createSondage = function (sondage) {\n  return new Promise((resolve) => {\n    const sondage_id = id_generator();\n    Sondage.addSondage(sondage_id, this.pseudo, Date.now(), sondage.name).then(() => {\n      let promises = [];\n      sondage.thematiqueList.forEach((thematique) => {\n        promises.push(Thematique.addThematique(thematique.name));\n      });\n      Promise.all(promises).then((thematiqueListWithId) => {\n        addThematiqueId(sondage.thematiqueList, thematiqueListWithId);\n        promises = [];\n        sondage.thematiqueList.forEach((thematique) => {\n          thematique.questionList.forEach((question) => {\n            promises.push(Question.addQuestion(\n              sondage_id, thematique.id, question.text, question.keyWord,\n            ));\n          });\n        });\n        Promise.all(promises).then(() => { resolve(sondage_id); });\n      });\n    });\n  });\n};\n\nUser.prototype.getCommentairesJour = function (jour) {\n  return new Promise((resolve) => {\n    Commentaire.findAll({\n      include: [{\n        model: Remplissage,\n        where: { date: jour },\n      },\n      {\n        model: Thematique,\n      },\n      ],\n    }).then((commentaires) => {\n      const promiseList = [];\n      commentaires.forEach((commentaire) => {\n        const promise = new Promise((resolveCom) => {\n          commentaire.dataValues.user = {\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n          };\n          User.findOne({ where: { id: commentaire.dataValues.remplissage.dataValues.user_id } })\n            .then((user) => {\n              commentaire.dataValues.user.firstName = user.dataValues.firstName;\n              commentaire.dataValues.user.lastName = user.dataValues.lastName;\n              commentaire.dataValues.user.email = user.dataValues.email;\n              resolveCom();\n            });\n        });\n        promiseList.push(promise);\n      });\n      Promise.all(promiseList).then(() => {\n        console.log(\"Commentaire for \", jour, \" found.\");\n        resolve(commentaires);\n      });\n    });\n  });\n};\n\nUser.prototype.getStatisticsSpecific = function (date) {\n  const searchDate = new Date(parseInt(date.year, 10), parseInt(date.month, 10) - 1, parseInt(date.day, 10));\n  return new Promise(function (resolveAll) {\n    JourSondage.findOne({ where: { date_emmission: searchDate } }).then((jourSondage) => {\n      if (!jourSondage) {\n        resolveAll(\"no sondage this day...\");\n      } else {\n        const sondage_id = jourSondage.dataValues.sondage_id;\n        const questionList = [];\n        const thematiqueIdList = [];\n        const remplissageIdList = [];\n        let sondage_name = null;\n        let promises = [];\n        promises.push(new Promise(function (resolve) {\n          Question.findAll({ where: { sondage_id: sondage_id } }).then((questionListFound) => {\n            questionListFound.forEach((question) => {\n              questionList.push(question.dataValues);\n              if (!thematiqueIdList.includes(question.dataValues.thematique_id)) {\n                thematiqueIdList.push(question.dataValues.thematique_id);\n              }\n            });\n            resolve();\n          });\n        }));\n        promises.push(new Promise(function (resolve) {\n          Remplissage.findAll({ where: { sondage_id: sondage_id, date: searchDate } }).then((remplissageListFound) => {\n            remplissageListFound.forEach((remplissage) => {\n              remplissageIdList.push(remplissage.dataValues.id);\n            });\n            resolve();\n          });\n        }));\n        promises.push(new Promise(function (resolve) {\n          Sondage.findOne({ where: { id: sondage_id } }).then((sondage) => {\n            sondage_name = sondage.dataValues.name;\n            resolve();\n          });\n        }));\n        Promise.all(promises).then(() => {\n          promises = [];\n          const thematiqueList = [];\n          const reponseList = [];\n          promises.push(new Promise(function (resolve) {\n            Thematique.findAll({ where: { id: { [Op.or]: thematiqueIdList } } }).then((thematiqueListFound) => {\n              thematiqueListFound.forEach((thematique) => {\n                thematiqueList.push(thematique.dataValues);\n              });\n              resolve();\n            });\n          }));\n          promises.push(new Promise(function (resolve) {\n            Reponse.findAll({ where: { remplissage_id: { [Op.or]: remplissageIdList } } }).then(((reponses) => {\n              reponses.forEach((reponse) => {\n                reponseList.push(reponse.dataValues);\n              });\n              resolve();\n            }));\n          }));\n          Promise.all(promises).then(() => {\n            // thematiqueId --> { thematiqueName, questionMap }\n            // questionMap: questionId --> { keyWord, sum, numberAnswer } \n            const sondageMap = new Map();\n            // thematiqueId -->  name \n            const thematiqueMap = new Map();\n            thematiqueList.forEach((thematique) => {\n              thematiqueMap.set(thematique.id, thematique.name);\n              sondageMap.set(thematique.id, { thematiqueName: thematique.name, questionMap: new Map() });\n            });\n            // question ID --> thematiqueId\n            const questionToThematique = new Map();\n            questionList.forEach((question) => {\n              questionToThematique.set(question.id, question.thematique_id);\n              sondageMap.get(question.thematique_id).questionMap.set(question.id, { keyWord: question.keyWord, sum: 0, numberAnswer: 0 });\n            });\n            reponseList.forEach((reponse) => {\n              const thematiqueId = questionToThematique.get(reponse.question_id);\n              sondageMap.get(thematiqueId).questionMap.get(reponse.question_id).sum += reponse.valeur;\n              sondageMap.get(thematiqueId).questionMap.get(reponse.question_id).numberAnswer += 1;\n            });\n            const sondageResult = {\n              name: sondage_name,\n              thematiqueList: [],\n            };\n            sondageMap.forEach((thematiqueObject) => {\n              const thematique = {\n                name: thematiqueObject.thematiqueName,\n                questionList: [],\n              };\n              thematiqueObject.questionMap.forEach((questionObject) => {\n                thematique.questionList.push({\n                  keyWord: questionObject.keyWord,\n                  avg: questionObject.sum / (questionObject.numberAnswer || 1),\n                });\n              });\n              sondageResult.thematiqueList.push(thematique);\n            });\n            resolveAll(sondageResult);\n          });\n        });\n      }\n    });\n  });\n};\n\nUser.prototype.getStatistics = function (next) {\n  const statistics = {\n    monthSentSondage: [], // fait\n    monthAnsweredSondage: [], // fait\n    totalSentSondage: 0, // fait\n    totalAnsweredSondage: 0, // fait\n    totalRate: 0,\n    totalSatis: 0,\n    todayAnsweredSendedRate: 0, // fait\n    todayAverageSatisfaction: 0, // fait\n    monthAverageSatisfaction: [], // fait\n    weekRate: [],\n\n  };\n  \n  const getTotalAnsweredSondage = new Promise(function (resolve) {\n    Remplissage.count().then((total) => {\n      resolve(total);\n    });\n  });\n\n  const getTotalSentSondage = new Promise(function (resolve) {\n    JourSondage.sum('nombre_emission').then((total) => {\n      resolve(total);\n    });\n  });\n\n  const getTotalRate = new Promise((resolve) => {\n    Promise.all([getTotalAnsweredSondage, getTotalSentSondage])\n      .then(((data) => {\n        const rate = parseFloat((data[0] / data[1]).toFixed(3));\n        resolve(rate);\n      }));\n  });\n\n  const getTotalSatis = new Promise((resolve) => {\n    Reponse.sum('valeur').then((val) => {\n      Reponse.count().then(total => resolve(parseFloat((val / total).toFixed(3))));\n    });\n  });\n\n  const getJourSentSondage = jour => new Promise((resolve) => {\n    const jourDate = new Date(jour).toLocaleDateString();\n    JourSondage.findOne({ where: { date_emmission: jour } }).then((jsondage) => {\n      if (jsondage) {\n        console.log(\"On \", jourDate, \", \", jsondage.dataValues.nombre_emission, \" mails were sent.\");\n        resolve(jsondage.dataValues.nombre_emission);\n      } else {\n        console.log(\"No mail sent on: \", jourDate);\n        resolve(0);\n      }\n    });\n  });\n\n  const getJourAnsweredSondage = jour => new Promise((resolve) => {\n    const jourDate = new Date(jour).toLocaleDateString();\n    Remplissage.count({ where: { date: jour } }).then((nb) => {\n      console.log(\"On \", jourDate, \", \", nb, \" sondage were answered.\");\n      resolve(nb);\n    });\n  });\n\n  const getMonthSentSondage = new Promise((resolve) => {\n    const intPromises = [];\n    for (let i = 0; i < 31; i++) {\n      intPromises.push(getJourSentSondage(Date.now() - (86400000 * i)));\n    }\n    Promise.all(intPromises).then((data) => {\n      resolve(data);\n    });\n  });\n\n  const getMonthAnsweredSondage = new Promise((resolve) => {\n    const intPromises = [];\n    for (let i = 0; i < 31; i++) {\n      intPromises.push(getJourAnsweredSondage(Date.now() - (86400000 * i)));\n    }\n    Promise.all(intPromises).then((data) => {\n      resolve(data);\n    });\n  });\n\n  const getDayStatis = jour => new Promise((resolve) => {\n    Reponse.findAll({\n      include: [{\n        model: Remplissage,\n        where: { date: jour },\n      }],\n    }).then((reps) => {\n      if (reps.length > 0) {\n        let satisfaction = 0;\n        reps.forEach((rep) => {\n          satisfaction += rep.dataValues.valeur;\n        });\n        resolve(parseFloat((satisfaction / reps.length).toFixed(3)));\n      } else {\n        resolve(0);\n      }\n    });\n  });\n  \n  const getDayRate = jour => new Promise((resolve) => {\n    Promise.all([getJourAnsweredSondage(jour), getJourSentSondage(jour)])\n      .then(((data) => {\n        console.log(data);\n        let rate = Number;\n        if (data[1] !== 0) {\n          rate = parseFloat((data[0] / data[1]).toFixed(3));\n        } else {\n          rate = 0;\n        }\n        resolve(rate);\n      }));\n  });\n\n  const getTodayStatis = new Promise((resolve) => {\n    getDayStatis(Date.now()).then(data => resolve(data));\n  });\n\n  const getTodayRate = new Promise((resolve) => {\n    getDayRate(Date.now()).then(data => resolve(data));\n  });\n\n  const getMonthStatis = new Promise((resolve) => {\n    const intPromises = [];\n    for (let i = 0; i < 31; i++) {\n      intPromises.push(getDayStatis(Date.now() - (86400000 * i)));\n    }\n    Promise.all(intPromises).then((data) => {\n      resolve(data);\n    });\n  });\n\n  const getWeekRate = new Promise((resolve) => {\n    const intPromises = [];\n    for (let i = 0; i < 8; i++) {\n      intPromises.push(getDayRate(Date.now() - (86400000 * i)));\n    }\n    Promise.all(intPromises).then((data) => {\n      resolve(data);\n    });\n  });\n\n  Promise.all([\n    getTotalAnsweredSondage,\n    getTotalSentSondage,\n    getTotalRate,\n    getTotalSatis,\n    getMonthSentSondage,\n    getMonthAnsweredSondage,\n    getTodayRate,\n    getTodayStatis,\n    getMonthStatis,\n    getWeekRate,\n  ]).then((statisticTab) => {\n    const [\n      totalAnsweredSondage, \n      totalSentSondage, \n      totalRate,\n      totalSatis,\n      monthSentSondage, \n      monthAnsweredSondage,\n      todayAnsweredSendedRate,\n      todayAverageSatisfaction,\n      monthAverageSatisfaction,\n      weekRate,\n    ] = statisticTab;\n    next({\n      totalSentSondage: totalSentSondage,\n      totalAnsweredSondage: totalAnsweredSondage,\n      totalRate: totalRate,\n      totalSatis: totalSatis,\n      monthSentSondage: monthSentSondage,\n      monthAnsweredSondage: monthAnsweredSondage,\n      todayAnsweredSendedRate: todayAnsweredSendedRate,\n      todayAverageSatisfaction: todayAverageSatisfaction,\n      monthAverageSatisfaction: monthAverageSatisfaction,\n      weekRate: weekRate,\n    });\n  });\n};\n\nUser.prototype.findSondage = function (req) {\n  return new Promise((resolve) => {\n    const { sondage_id, remplissage_id } = req.user;\n    const serverResponse = { alreadyAnswered: false };\n    Remplissage.findOne({ where: { id: remplissage_id } }).then((remplissage) => {\n      Question.findAll({\n        include: [{\n          model: Thematique,\n        }],\n        where: { sondage_id: sondage_id }, \n      }).then((questions) => {\n        const questionList = [];\n        const thematiqueList = new Map();\n        questions.forEach((question) => {\n          const quest = JSON.parse(JSON.stringify(question));\n          delete quest.thematique;\n          if (!thematiqueList.get(question.dataValues.thematique.dataValues.id)) {\n            thematiqueList.set(\n              question.dataValues.thematique.dataValues.id, \n              question.dataValues.thematique.dataValues,\n            );\n          }\n          const newList = thematiqueList.get(question.dataValues.thematique.dataValues.id);\n          if (newList.questionList) {\n            newList.questionList.push(quest);\n          } else {\n            newList.questionList = [quest];\n          }\n          thematiqueList.set(question.dataValues.thematique.dataValues.id, newList); \n        });\n        thematiqueList.forEach((elem) => {\n          questionList.push(elem);\n        });\n        serverResponse.thematiqueList = questionList; \n\n        // Si le sondage a déjà été remplis, on renvois les réponses\n        if (remplissage) {\n          serverResponse.alreadyAnswered = true;\n          Reponse.findAll({ where: { remplissage_id: remplissage_id } }).then((reponses) => {\n            Sondage.findOne({ where: { id: sondage_id } }).then((sondage) => {\n              Commentaire.findAll({ where: { remplissage_id: remplissage_id } })\n                .then((commentaires) => {\n                  serverResponse.sondageName = sondage.dataValues.name;\n                  const reponseList = [];\n                  const commentaireList = [];\n                  reponses.forEach((reponse) => {\n                    reponseList.push(reponse);\n                  });\n                  commentaires.forEach((commentaire) => {\n                    commentaireList.push(commentaire);\n                  }); \n                  serverResponse.reponseList = reponseList;\n                  serverResponse.commentaireList = commentaireList;\n                  resolve(serverResponse);\n                });\n            });\n          }); \n        } else {\n          Sondage.findOne({ where: { id: sondage_id } }).then((sondage) => {\n            serverResponse.sondageName = sondage.dataValues.name;\n            resolve(serverResponse);\n          }); \n        }\n      }); \n    });\n  });\n};\n    \n// input\n// const sondage = {\n//   remlissage_id: \"...\"\n//   sondage_id: \"..\",\n//   answered_questions: [\n//     {\n//       question_id: \"...\",\n//       answer: \"...\",\n//     },\n//   answered_commentaires: [\n//     {\n//      thematique_id: \"...\",\n//      answer: \"...\",\n//     },\n//   ],\n// };\n// uniquement les questions auxquelles l'ut a repondue, pas de question sans reponses\nUser.prototype.answerSondage = function (sondage, simulationDate) {\n  const date = simulationDate || Date.now();\n  return new Promise((resolve) => {\n    const remplissage_id = sondage.remplissage_id;\n    const sondage_id = sondage.sondage_id;\n    Remplissage.addRemplissage(remplissage_id, sondage_id, this.id, date).then(() => {\n      const promises = [];\n      sondage.answered_questions.forEach((question_answer) => {\n        promises.push(\n          Reponse.addReponse(remplissage_id, question_answer.question_id, question_answer.answer),\n        );\n      });\n      sondage.answered_commentaires.forEach((commentaire_answer) => {\n        promises.push(\n          Commentaire.addCommentaire(\n            remplissage_id, commentaire_answer.thematique_id, commentaire_answer.answer,\n          ),\n        );\n      });\n      Promise.all(promises).then(() => {\n        resolve();\n      });\n    });\n  });\n};\n\nUser.prototype.updateSondage = function (sondage) {\n  return new Promise((resolve) => {\n    const remplissage_id = sondage.remplissage_id;\n    sondage.answered_questions.forEach((question) => {\n      Reponse.findOne({\n        where: { \n          remplissage_id: remplissage_id, \n          question_id: question.question_id,\n        }, \n      })\n        .then((reponse) => {\n          Reponse.updateReponse(reponse.dataValues.id, question.answer);\n        });\n    });\n    sondage.answered_commentaires.forEach((commentaire) => {\n      Commentaire.findOne({\n        where: {\n          remplissage_id: remplissage_id, \n          thematique_id: commentaire.thematique_id,\n        }, \n      })\n        .then((comment) => {\n          if (comment) {\n            Commentaire.updateCommentaire(comment.dataValues.id, commentaire.answer);\n          } else {\n            Commentaire.addCommentaire(\n              remplissage_id, commentaire.thematique_id, commentaire.answer,\n            );\n          }\n        });\n    });\n    resolve();\n  });\n};\n\nconst Models = {\n  User: User,\n  Sondage: Sondage,\n  JourSondage: JourSondage,\n  Remplissage: Remplissage,\n  Question: Question,\n  Reponse: Reponse,\n  Thematique: Thematique,\n  Commentaire: Commentaire,\n};\n\nmodule.exports = Models;"],"file":"index.js"}