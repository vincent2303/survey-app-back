{"version":3,"sources":["../../routes/user.js"],"names":["express","require","router","Router","fs","bodyParser","use","json","urlencoded","extended","morgan","Models","req","res","next","isAuthenticated","url","status","message","post","newCookie","Object","assign","user","body","updatedUser","login","err","console","log","User","updateUser","id","then","base64Data","photo","replace","writeFile","pseudo","update","where","get","Sondage","findOne","current","sondage","sondage_id","dataValues","token","generateJwt","send","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\n\nconst router = express.Router();\n\nconst fs = require('fs');\n\n// Le body Parser permet d'acceder aux variable envoyés dans le body\nconst bodyParser = require('body-parser');\n\nrouter.use(bodyParser.json());\nrouter.use(express.urlencoded({ extended: false }));\n\nconst morgan = require('morgan');\n\nrouter.use(morgan('dev'));\n\n// Récupère les models\nconst Models = require('../models');\n\nrouter.use((req, res, next) => {\n  if (!req.isAuthenticated() && req.url !== '/login') {\n    res.status(401).json({ message: 'Not logged in' });\n  } else {\n    next();\n  }\n});\n\n// --------- Routes protegées-------------\n\nrouter.post('/updateUser', (req, res) => {\n  const newCookie = Object.assign(req.user, req.body.updatedUser);\n  req.login(newCookie, (err) => {\n    console.log(\"Modified cookie: \", newCookie);\n  });\n  Models.User.updateUser(req.user.id, req.body.updatedUser).then(() => {\n    res.status(200).json(req.body.updatedUser);\n  });\n});\n\nrouter.post('/updatePhoto', (req, res) => {\n  const base64Data = req.body.photo.replace(/^data:image\\/jpeg;base64,/, \"\");\n  console.log(base64Data);\n  fs.writeFile(`./public/user/photo/${req.user.pseudo}`, base64Data, 'base64', (err) => {\n    if (err) { \n      console.log(err);\n    } else {\n      Models.User.update(\n        { photo: `/user/photo/${req.user.pseudo}.jpg` },\n        { where: { id: req.user.id } },\n      ).then(() => {\n        const newCookie = Object.assign(req.user, { photo: `/user/photo/${req.user.pseudo}` });\n        req.login(newCookie, (err) => {\n          console.log(\"Modified cookie: \", newCookie);\n        });\n        res.status(200).json({ photo: `/user/photo/${req.user.pseudo}` });\n      });\n    }\n  });\n});\n\nrouter.get('/getToken', (req, res) => {\n  Models.Sondage.findOne({ where: { current: true } }).then((sondage) => {\n    Models.User.findOne({ where: { id: req.user.id } })\n      .then((user) => {\n        const sondage_id = sondage.dataValues.id;\n        const token = user.generateJwt(sondage_id);\n        res.status(200).send({ token: token });\n      });\n  });\n});\n \nmodule.exports = router;"],"file":"user.js"}