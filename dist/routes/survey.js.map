{"version":3,"sources":["../../routes/survey.js"],"names":["express","require","router","Router","bodyParser","use","json","urlencoded","extended","morgan","Models","userCheckToken","get","req","res","User","findOne","where","id","user","user_id","then","findSondage","serverResponse","console","log","status","post","sondage_id","remplissage_id","Remplissage","findById","remplissage","sondage","answered_questions","body","answered_commentaires","updateSondage","firstName","send","msg","answerSondage","newIntensity","update","mailIntensity","dataValues","err","next","name","message","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\n\nconst router = express.Router();\n\n// Le body Parser permet d'acceder aux variable envoyÃ©s dans le body\nconst bodyParser = require('body-parser');\n\nrouter.use(bodyParser.json());\nrouter.use(express.urlencoded({ extended: false }));\n\nconst morgan = require('morgan');\n\nrouter.use(morgan('dev'));\n\nconst Models = require('../models');\nconst userCheckToken = require('../controllers/userCheckToken');\n\n// front send un get avec header\nrouter.get('/getSondage',\n  userCheckToken,\n  (req, res) => {\n    Models.User.findOne({ where: { id: req.user.user_id } }).then((user) => {\n      user.findSondage(req).then((serverResponse) => {\n        console.log(\"Sending current sondage to front\");\n        res.status(200).json(serverResponse);\n      });\n    });\n  });\n\n\n// front send un post avec header et dans le body un answered_questions (cf index.js)\nrouter.post('/answerSondage',\n  userCheckToken,\n  (req, res) => {\n    const { user_id, sondage_id, remplissage_id } = req.user;\n    Models.Remplissage.findById(remplissage_id).then((remplissage) => {\n      if (remplissage) {\n        Models.User.findById(user_id).then((user) => {\n          const sondage = { \n            sondage_id: sondage_id,\n            remplissage_id: remplissage_id,\n            answered_questions: req.body.answered_questions,\n            answered_commentaires: req.body.answered_commentaires,\n          };\n          user.updateSondage(sondage).then(() => {\n            console.log(req.user.firstName, \" already answered and changed his answers\");\n            res.status(200).send({ msg: \"Merci d'avoir modifier votre reponse !\" });\n          });\n        });\n      } else {\n        Models.User.findById(user_id).then((user) => {\n          const sondage = { \n            sondage_id: sondage_id,\n            remplissage_id: remplissage_id,\n            answered_questions: req.body.answered_questions,\n            answered_commentaires: req.body.answered_commentaires,\n          };\n          user.answerSondage(sondage).then(() => {\n            console.log(\"New remplissage submitted by: \", req.user.firstName);\n            res.status(200).send({ msg: \"Merci d'avoir repondu au sondage !\" });\n          });\n        });\n      }\n    });\n  });\n\nrouter.post('/changeFreq', userCheckToken, (req, res) => {\n  console.log(typeof (req.body.newIntensity) === \"number\");\n  if (typeof (req.body.newIntensity) === \"number\") {\n    Models.User.update(\n      { mailIntensity: req.body.newIntensity },\n      { where: { id: req.user.user_id } },\n    ).then(res.status(200).send({ msg: \"Mail Intensity changed\" }));\n  }\n});\n\nrouter.get('/getMailIntensity',\n  userCheckToken,\n  (req, res) => {\n    Models.User.findOne({ where: { id: req.user.user_id } }).then((user) => {\n      res.status(200).json({ mailIntensity: user.dataValues.mailIntensity });\n    });\n  });\n\nrouter.use((err, req, res, next) => {\n  console.log(\"error: \", err.name);\n  if (err.name === 'UnauthorizedError') {\n    res.status(401).json({ message: 'Unauthorized. Invalid token!' });\n  }\n});\n\n\nmodule.exports = router;"],"file":"survey.js"}