{"version":3,"sources":["../../routes/admin.js"],"names":["express","require","router","Router","bodyParser","use","json","urlencoded","extended","morgan","Models","req","res","next","url","isAuthenticated","status","message","user","auth","post","promises","body","userList","forEach","push","User","addUser","firstName","lastName","email","Promise","all","then","pseudo","password","send","console","log","get","findOne","where","id","getSondage","sondageList","createSondage","name","Sondage","update","current","sondage","dataValues","findById","getCommentairesJour","params","jour","comments","getStatistics","statisticTab","getStatisticsSpecific","sondageResult","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\n\nconst router = express.Router();\n\n\n// Le body Parser permet d'acceder aux variable envoyés dans le body\nconst bodyParser = require('body-parser');\n\nrouter.use(bodyParser.json());\nrouter.use(express.urlencoded({ extended: false }));\n\nconst morgan = require('morgan');\n\n// Récupère les models\nconst Models = require('../models/index');\n\nrouter.use(morgan('dev'));\n\nrouter.use((req, res, next) => {\n  if (req.url === '/login') {\n    next();\n  } else if (!req.isAuthenticated()) {\n    res.status(401).json({ message: 'Not logged in' });\n  } else if (req.user.auth !== 1) {\n    res.status(401).json({ message: 'Not authorized' });\n  } else {\n    next();\n  }\n});\n\n// --------- Routes protegées par token -------------\n\n// Un administrateur peut ajouter un autre administrateur :\n// Les attributs de l'admin sont dans le body de la requète\n// TODO : Prendre en compte le cas où il y a une erreure au cours de la création de l'admin'\n\n// Routes relatives a la gestion des admins et des users\n/* router.post('/createAdmin', (req, res) => {\n  console.log(`creating admin ${req.body.pseudo}`);\n  // On vérifie que les données minmums pour créer un utilisateur sont bien présentes\n  if (!req.body.pseudo || !req.body.mp) {\n    console.log(\"/!\\\\ ERROR : The body of the create admin request doesnt contain pseudo or mp !\");\n    res.status(400).send(\"Bad Request : The body of the create admin request doesnt contain pseudo or mp ! \");\n  } else {\n    Models.Admin.addAdmin(req.body.pseudo, req.body.mp, Date.now()).then(() => {\n      console.log(`Added admin: ${req.body.pseudo}`);\n      res.status(200).send(`Admin ${req.body.pseudo} created`);\n    });\n  }\n}); */\n\nrouter.post('/csvPost',\n  (req, res) => {\n    const promises = [];\n    req.body.userList.forEach((user) => {\n      promises.push(Models.User.addUser(user.firstName, user.lastName, user.email));\n    });\n    Promise.all(promises).then(res.status(200).json(\"User list added\"));\n  });\n\nrouter.post('/singlePost',\n  (req, res) => {\n    Models.User.addUser(\n      req.body.firstName, \n      req.body.lastName, \n      req.body.email, \n      req.body.pseudo,\n      req.body.password,\n      req.body.auth,\n    ).then(() => {\n      res.status(200).send(\"New user added\");\n      console.log(\"New user added: \", req.body.pseudo);\n    });\n  }); \n\n// Route relative à l'affichage et la creation de sondage\n\nrouter.get('/getSondage', (req, res) => {\n  Models.User.findOne({ where: { id: req.user.id } }).then((user) => {\n    user.getSondage().then((sondageList) => {\n      console.log(\"Sent all sondages to client\");\n      res.status(200).json(sondageList);\n    });\n  });\n});\n\n/* Survey object sent from the front to /postSondage\n  {\n    name: sondagename,\n    thematiqueList: [\n      {\n        name: thematiquename,\n        questionList: [\n          {\n            keyWord: motclef,\n            question: question,\n          },\n          { ... },\n        ]\n      },\n      { ... },\n    ]\n  }\n*/\nrouter.post('/postSondage', (req, res) => {\n  Models.User.findOne({ where: { id: req.user.id } }).then((user) => {\n    user.createSondage(req.body).then(() => {\n      console.log(\"New sondage created: \", req.body.name);\n      res.status(200).send(\"New sondage created\");\n    });\n  });\n});\n\nrouter.post('/changeNextSondage', (req, res) => {\n  if (!req.body) {\n    console.log(\"/!\\\\ ERROR : Inccorect body\");\n    res.status(400).send(\"Bad Request : The body doesnt contain next_sondage ! \");\n  } else {\n    Models.Sondage.update({ current: false }, { where: { current: true } }).then(() => {\n      Models.Sondage.update({ current: true }, { where: { id: req.body.id } }).then((sondage) => {\n        console.log(\"Changed the sondage to sondage: \", req.body.name);\n        res.status(200).json(sondage.dataValues);\n      });\n    });\n  }\n});\n\n// Route relative aux statisques\n\nrouter.get('/getCommentaireJour/:jour', (req, res) => {\n  Models.User.findById(req.user.id).then((user) => {\n    user.getCommentairesJour(req.params.jour).then((comments) => {\n      console.log(\"Fetching all Commentaires on: \", req.params.jour);\n      res.status(200).json(comments);\n    });\n  });\n});\n\nrouter.get(\"/generalStatistics\", (req, res) => {\n  Models.User.findById(req.user.id).then((user) => {\n    user.getStatistics((statisticTab) => {\n      res.json(statisticTab);\n    });\n  });\n});\n\nrouter.get(\"/specificStatistics/:year/:month/:day\", (req, res) => {\n  Models.User.findById(req.user.id).then((user) => {\n    user.getStatisticsSpecific(req.params).then((sondageResult) => {\n      res.json(sondageResult);\n    });\n  });\n});\n\nmodule.exports = router;"],"file":"admin.js"}